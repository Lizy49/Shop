import json
import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    WebAppInfo, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from aiogram import F
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7592882454:AAGGwkE47GC0NHZ1cBiPqwQrI76gPQifzh0'
MANAGER_CHAT_ID = -1002378282152
CHANNEL_USERNAME = '@olimpmagadan'
MANAGER_USERNAME = '@olimpshopmanager'
DATABASE_FILE = 'database.db'
MAGADAN_TIMEZONE = pytz.timezone('Asia/Magadan')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher(storage=MemoryStorage())

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_FILE, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                invited_by INTEGER,
                registered_at TEXT DEFAULT CURRENT_TIMESTAMP,
                joined_channel BOOLEAN DEFAULT FALSE,
                discount INTEGER DEFAULT 0
            )
        ''')
        
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                inviter_id INTEGER,
                referral_id INTEGER UNIQUE,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                activated BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (inviter_id) REFERENCES users(user_id),
                FOREIGN KEY (referral_id) REFERENCES users(user_id)
            )
        ''')
        
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                data TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'new',
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        self.conn.commit()

    def add_user(self, user_id: int, username: str, full_name: str, invited_by: Optional[int] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, full_name, invited_by)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, full_name, invited_by))
        self.conn.commit()

    def add_referral(self, inviter_id: int, referral_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
        try:
            self.cursor.execute('''
                INSERT OR IGNORE INTO referrals (inviter_id, referral_id)
                VALUES (?, ?)
            ''', (inviter_id, referral_id))
            self.conn.commit()
        except sqlite3.IntegrityError:
            pass

    def mark_as_joined(self, user_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –≤ –∫–∞–Ω–∞–ª"""
        self.cursor.execute('''
            UPDATE users SET joined_channel = TRUE
            WHERE user_id = ?
        ''', (user_id,))
        self.conn.commit()

    def activate_referral(self, referral_id: int):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª)"""
        self.cursor.execute('''
            UPDATE referrals SET activated = TRUE
            WHERE referral_id = ?
        ''', (referral_id,))
        self.conn.commit()

    def get_user_referrals(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute('''
            SELECT r.referral_id, u.username, u.full_name, r.created_at, r.activated
            FROM referrals r
            JOIN users u ON r.referral_id = u.user_id
            WHERE r.inviter_id = ?
            ORDER BY r.created_at DESC
        ''', (user_id,))
        columns = [col[0] for col in self.cursor.description]
        return [dict(zip(columns, row)) for row in self.cursor.fetchall()]

    def get_active_referrals_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        self.cursor.execute('''
            SELECT COUNT(*) FROM referrals
            WHERE inviter_id = ? AND activated = TRUE
        ''', (user_id,))
        return self.cursor.fetchone()[0]

    def get_top_referrals(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        self.cursor.execute('''
            SELECT 
                u.user_id, 
                COALESCE(u.username, u.full_name) as display_name,
                COUNT(r.id) as referrals_count
            FROM users u
            JOIN referrals r ON u.user_id = r.inviter_id
            WHERE r.activated = TRUE
            GROUP BY u.user_id, u.username, u.full_name
            ORDER BY referrals_count DESC
            LIMIT ?
        ''', (limit,))
        columns = [col[0] for col in self.cursor.description]
        return [dict(zip(columns, row)) for row in self.cursor.fetchall()]

    def get_user_info(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.cursor.execute('''
            SELECT username, full_name, joined_channel, discount FROM users WHERE user_id = ?
        ''', (user_id,))
        row = self.cursor.fetchone()
        if row:
            return {
                'username': row[0],
                'full_name': row[1],
                'joined_channel': row[2],
                'discount': row[3]
            }
        return None

    def add_order(self, user_id: int, data: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        self.cursor.execute('''
            INSERT INTO orders (user_id, data)
            VALUES (?, ?)
        ''', (user_id, data))
        self.conn.commit()
        return self.cursor.lastrowid

    def update_user_discount(self, user_id: int, discount: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute('''
            UPDATE users SET discount = ?
            WHERE user_id = ?
        ''', (discount, user_id))
        self.conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", web_app=WebAppInfo(url="https://olimpshop49.netlify.app/"))],
            [
                KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
                KeyboardButton(text="üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"),
                KeyboardButton(text="üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
            ],
            [KeyboardButton(text="üíé –ú–æ—è —Å–∫–∏–¥–∫–∞")]
        ],
        resize_keyboard=True
    )

def get_channel_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]
        ]
    )

def get_order_keyboard(order_id: int):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
            ]
        ]
    )

def calculate_discount(referrals_count: int) -> int:
    """–†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    if referrals_count >= 50:
        return 50
    elif referrals_count >= 40:
        return 45
    elif referrals_count >= 35:
        return 40
    elif referrals_count >= 30:
        return 35
    elif referrals_count >= 25:
        return 30
    elif referrals_count >= 20:
        return 25
    elif referrals_count >= 15:
        return 20
    elif referrals_count >= 10:
        return 15
    elif referrals_count >= 5:
        return 10
    elif referrals_count >= 1:
        return 5
    return 0

def get_magadan_time():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–∞–≥–∞–¥–∞–Ω—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É"""
    return datetime.now(MAGADAN_TIMEZONE).strftime('%d.%m.%Y %H:%M')

async def check_channel_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

@dp.message(Command("start", "restart"))
async def cmd_start(message: types.Message, command: CommandObject = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /restart"""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if command and command.args and command.args.startswith("ref="):
        try:
            inviter_id = int(command.args.split("=")[1])
            if inviter_id != user_id:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É
                db.add_user(inviter_id, 
                           username or "unknown", 
                           full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                db.add_user(user_id, username, full_name, inviter_id)
                db.add_referral(inviter_id, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º
                inviter_info = db.get_user_info(inviter_id)
                inviter_username = inviter_info['username'] if inviter_info else "unknown"
                inviter_name = inviter_info['full_name'] if inviter_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                inviter_text = (f"@{inviter_username}" if inviter_username != "unknown" 
                              else inviter_name)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                await bot.send_message(
                    chat_id=MANAGER_CHAT_ID,
                    text=f"üÜï *–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!*\n\n"
                         f"üë§ *–ü—Ä–∏–≥–ª–∞—Å–∏–ª:* {inviter_text} (ID: `{inviter_id}`)\n"
                         f"üë• *–ü—Ä–∏–≤–µ–¥—ë–Ω:* @{username if username else full_name} (ID: `{user_id}`)\n"
                         f"üìÖ *–î–∞—Ç–∞:* {get_magadan_time()} (–ú–°–ö+8)\n"
                         f"#—Ä–µ—Ñ–µ—Ä–∞–ª #{user_id} #{inviter_id}",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                db.add_user(user_id, username, full_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            db.add_user(user_id, username, full_name)
    else:
        db.add_user(user_id, username, full_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_channel_subscription(user_id)
    if is_subscribed:
        db.mark_as_joined(user_id)
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ
        user_info = db.get_user_info(user_id)
        if user_info and user_info.get('invited_by'):
            db.activate_referral(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É
    ref_count = db.get_active_referrals_count(user_id)
    discount = calculate_discount(ref_count)
    db.update_user_discount(user_id, discount)
    
    if not is_subscribed:
        await message.answer(
            f"üî• *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OlimpShop49, {full_name}!*\n\n"
            f"üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}\n\n"
            f"üíé –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
            f"- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π\n"
            f"- –°–∫–∏–¥–∫—É –¥–æ 50% –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n"
            f"- –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º",
            reply_markup=get_channel_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.answer(
            f"üî• *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OlimpShop49, {full_name}!*\n\n"
            f"üíé *–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* \n`https://t.me/{(await bot.get_me()).username}?start=ref={user_id}`\n"
            f"üí∞ *–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞:* {discount}% (–ø—Ä–∏–≤–µ–¥–µ–Ω–æ {ref_count} –¥—Ä—É–∑–µ–π)\n\n"
            f"–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∞–π —Å–∫–∏–¥–∫–∏ –¥–æ 50%!\n\n"
            f"–ê —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —É –Ω–∞—Å –∂–∏–∂–∏, –æ–¥–Ω–æ—Ä–∞–∑–∫–∏, –ø–æ–¥–∏–∫–∏, –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏\n"
            f"–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å, –≤–µ–¥—å –∫—Ç–æ –±–æ–ª—å—à–µ –ø—Ä–∏–≤–µ–¥–µ—Ç, —É —Ç–æ–≥–æ –±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞. –£–¥–∞—á–∏!",
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await message.answer(
        "üìû <b>–ö–û–ù–¢–ê–ö–¢–´ OlimpShop49</b> üìû\n\n"
        "üîπ –¢–µ–ª–µ–≥—Ä–∞–º: @olimpmagadan\n"
        "üîπ –ú–µ–Ω–µ–¥–∂–µ—Ä: @olimpshopmanager\n"
        "üîπ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –∫–∏–Ω—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –º–æ–µ —Å—Ç–∞—Ä–∞–Ω–∏–µ(–¢-–ë–∞–Ω–∫:2200701015005249)\n\n"
        "‚ö° <i>–ó–µ–≤—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!</i> ‚ö°\n"
        "–ü–∏—à–∏ - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –æ—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–µ–µ –º–æ–ª–Ω–∏–∏!",
        reply_markup=get_main_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text == "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
async def show_schedule(message: types.Message):
    """–ü–æ–∫–∞–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    await message.answer(
        "‚è∞ <b>–†–ï–ñ–ò–ú –†–ê–ë–û–¢–´</b> ‚è∞\n\n"
        "‚ñ´Ô∏è –û–±—ã—á–Ω—ã–µ –¥–Ω–∏: 10:00 - 23:00 (–∫–æ–≥–¥–∞ –ó–µ–≤—Å –Ω–µ –ø—å—ë—Ç –∞–º–±—Ä–æ–∑–∏—é)\n"
        "‚ñ´Ô∏è –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏: 12:00 - 22:00 (–Ω–æ—á–Ω—ã–µ –º–æ–ª–Ω–∏–∏ - –Ω–∞—à–µ –≤—Å—ë)\n\n"
        "‚ö° <i>–î–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö!</i> ‚ö°\n"
        "–î–∞–∂–µ –µ—Å–ª–∏ —Å–∞–º –ì–µ—Ä–∞–∫–ª —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!",
        reply_markup=get_main_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
    try:
        user_id = message.from_user.id
        data = json.loads(message.web_app_data.data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Å–∫–∏–¥–∫–µ
        user_info = db.get_user_info(user_id)
        discount = user_info['discount'] if user_info else 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
        order_id = db.add_order(user_id, json.dumps(data, ensure_ascii=False))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å–æ —Å–∫–∏–¥–∫–æ–π
        total = float(data.get('total', 0))
        discounted_total = total * (100 - discount) / 100
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_message = (
            f"‚ö° <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó! –ì–æ—Ç–æ–≤—å –º–æ–ª–Ω–∏–∏!</b> ‚ö°\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for item in data.get('items', []):
            manager_message += (
                f"‚ñ´ {item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} | "
                f"–í–∫—É—Å: {item.get('flavor', '–ù–µ —É–∫–∞–∑–∞–Ω')} | "
                f"–ö–æ–ª-–≤–æ: {item.get('quantity', 1)} | "
                f"–°—É–º–º–∞: {item.get('price', 0)}‚ÇΩ\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏ –æ–ø–ª–∞—Ç–µ
        manager_message += (
            f"\nüìç <b>–†–∞–π–æ–Ω:</b> {data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')} ({data.get('delivery_price', 0)}‚ÇΩ)\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {total}‚ÇΩ\n"
        )
        
        if discount > 0:
            manager_message += f"üíé <b>–°–∫–∏–¥–∫–∞ {discount}%:</b> {discounted_total:.2f}‚ÇΩ\n"
        
        manager_message += (
            f"üë§ <b>–û—Ç:</b> @{message.from_user.username or message.from_user.full_name}\n\n"
            f"<i>–ë—ã—Å—Ç—Ä–µ–µ –≤–µ—Ç—Ä–∞, –∫—É—Ä—å–µ—Ä! –ö–ª–∏–µ–Ω—Ç –∂–¥—ë—Ç!</i>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=manager_message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_order_keyboard(order_id)
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = (
            f"‚ö° <b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!</b> ‚ö°\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        )
        
        for item in data.get('items', []):
            user_message += (
                f"‚ñ´ {item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} | "
                f"{item.get('quantity', 1)}—à—Ç. | "
                f"{item.get('price', 0)}‚ÇΩ\n"
            )
        
        user_message += (
            f"\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')} ({data.get('delivery_price', 0)}‚ÇΩ)\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<b>–ò—Ç–æ–≥–æ:</b> {total}‚ÇΩ\n"
        )
        
        if discount > 0:
            user_message += (
                f"<b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞:</b> {discount}%\n"
                f"<b>–ö –æ–ø–ª–∞—Ç–µ:</b> {discounted_total:.2f}‚ÇΩ\n"
            )
        
        user_message += (
            f"\n–ú–µ–Ω–µ–¥–∂–µ—Ä @olimpshopmanager —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –≤ OlimpShop49! ‚ö°"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            user_message,
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>",
            parse_mode=ParseMode.HTML
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>",
            parse_mode=ParseMode.HTML
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())