import json
import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from aiogram import F
from datetime import datetime
from typing import List, Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7592882454:AAGGwkE47GC0NHZ1cBiPqwQrI76gPQifzh0'
MANAGER_CHAT_ID = -1002378282152    # –í–∞—à ID —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
DATABASE_FILE = 'database.db'  # –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher(storage=MemoryStorage())

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_FILE, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                invited_by INTEGER,
                registered_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                inviter_id INTEGER,
                referral_id INTEGER UNIQUE,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                activated BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (inviter_id) REFERENCES users(user_id),
                FOREIGN KEY (referral_id) REFERENCES users(user_id)
            )
        ''')
        self.conn.commit()

    def add_user(self, user_id: int, username: str, invited_by: Optional[int] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, invited_by)
            VALUES (?, ?, ?)
        ''', (user_id, username, invited_by))
        self.conn.commit()

    def add_referral(self, inviter_id: int, referral_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
        try:
            self.cursor.execute('''
                INSERT OR IGNORE INTO referrals (inviter_id, referral_id)
                VALUES (?, ?)
            ''', (inviter_id, referral_id))
            self.conn.commit()
        except sqlite3.IntegrityError:
            pass

    def activate_referral(self, referral_id: int):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞)"""
        self.cursor.execute('''
            UPDATE referrals SET activated = TRUE
            WHERE referral_id = ?
        ''', (referral_id,))
        self.conn.commit()

    def get_user_referrals(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute('''
            SELECT r.referral_id, u.username, r.created_at, r.activated
            FROM referrals r
            JOIN users u ON r.referral_id = u.user_id
            WHERE r.inviter_id = ?
            ORDER BY r.created_at DESC
        ''', (user_id,))
        columns = [col[0] for col in self.cursor.description]
        return [dict(zip(columns, row)) for row in self.cursor.fetchall()]

    def get_active_referrals_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        self.cursor.execute('''
            SELECT COUNT(*) FROM referrals
            WHERE inviter_id = ? AND activated = TRUE
        ''', (user_id,))
        return self.cursor.fetchone()[0]

    def get_top_referrals(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        self.cursor.execute('''
            SELECT u.user_id, u.username, COUNT(r.id) as referrals_count
            FROM users u
            JOIN referrals r ON u.user_id = r.inviter_id
            WHERE r.activated = TRUE
            GROUP BY u.user_id, u.username
            ORDER BY referrals_count DESC
            LIMIT ?
        ''', (limit,))
        columns = [col[0] for col in self.cursor.description]
        return [dict(zip(columns, row)) for row in self.cursor.fetchall()]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", web_app=WebAppInfo(url="https://olimpshop49.netlify.app/"))],
            [
                KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
                KeyboardButton(text="üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"),
                KeyboardButton(text="üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
            ],
            [KeyboardButton(text="üíé –ú–æ—è —Å–∫–∏–¥–∫–∞")]
        ],
        resize_keyboard=True
    )

def calculate_discount(referrals_count: int) -> int:
    """–†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    if referrals_count >= 50:
        return 50
    elif referrals_count >= 40:
        return 45
    elif referrals_count >= 35:
        return 40
    elif referrals_count >= 30:
        return 35
    elif referrals_count >= 25:
        return 30
    elif referrals_count >= 20:
        return 25
    elif referrals_count >= 15:
        return 20
    elif referrals_count >= 10:
        return 15
    elif referrals_count >= 5:
        return 10
    elif referrals_count >= 1:
        return 5
    return 0

@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: CommandObject = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if command and command.args and command.args.startswith("ref="):
        try:
            inviter_id = int(command.args.split("=")[1])
            if inviter_id != user_id:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                db.add_user(inviter_id, "unknown")
                db.add_user(user_id, username, inviter_id)
                db.add_referral(inviter_id, user_id)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                inviter = db.cursor.execute(
                    "SELECT username FROM users WHERE user_id = ?", (inviter_id,)
                ).fetchone()
                inviter_username = inviter[0] if inviter else "unknown"
                
                await bot.send_message(
                    chat_id=MANAGER_CHAT_ID,
                    text=f"üÜï –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\n"
                         f"üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: @{inviter_username} (ID: {inviter_id})\n"
                         f"üë• –ü—Ä–∏–≤–µ–¥—ë–Ω: @{username} (ID: {user_id})\n"
                         f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
            else:
                db.add_user(user_id, username)
        except (ValueError, IndexError, Exception) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            db.add_user(user_id, username)
    else:
        db.add_user(user_id, username)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏
    ref_count = db.get_active_referrals_count(user_id)
    discount = calculate_discount(ref_count)
    
    await message.answer(
        f"üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OlimpShop49, {username}!\n\n"
        f"üíé –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: `https://t.me/{(await bot.get_me()).username}?start=ref={user_id}`\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount}% (–ø—Ä–∏–≤–µ–¥–µ–Ω–æ {ref_count} –¥—Ä—É–∑–µ–π)\n\n"
        f"–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∞–π —Å–∫–∏–¥–∫–∏ –¥–æ 50%!\n\n"
        f"–ê —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —É –Ω–∞—Å –∂–∏–∂–∏, –æ–¥–Ω–æ—Ä–∞–∑–∫–∏, –ø–æ–¥–∏–∫–∏, –∏—Å–ø—Ä–∏—Ç–µ–ª–∏\n"
         "–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å, –≤–µ–¥—å –∫—Ç–æ –±–æ–ª—å—à–µ –ø—Ä–∏–≤–µ–¥–µ—Ç, —É —Ç–æ–≥–æ –±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞. –£–¥–∞—á–∏!" ,
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
async def show_top_referrals(message: types.Message):
    """–ü–æ–∫–∞–∑ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    top = db.get_top_referrals()
    if not top:
        await message.answer("üèÜ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≤–µ–ª. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!")
        return
    
    top_text = "\n".join(
        f"{i+1}. @{user['username']} ‚Äî {user['referrals_count']} —á–µ–ª. (—Å–∫–∏–¥–∫–∞ {calculate_discount(user['referrals_count'])}%)"
        for i, user in enumerate(top)
    )
    
    await message.answer(
        f"üèÜ –¢–û–ü –†–ï–§–ï–†–ê–õ–û–í üèÜ\n\n{top_text}\n\n"
        "–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–Ω–∏–º–∞–π—Å—è –≤ —Ç–æ–ø–µ!",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üíé –ú–æ—è —Å–∫–∏–¥–∫–∞")
async def show_my_discount(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    ref_count = db.get_active_referrals_count(user_id)
    discount = calculate_discount(ref_count)
    
    referrals = db.get_user_referrals(user_id)
    refs_text = "\n".join(
        f"‚ñ´Ô∏è {datetime.strptime(ref['created_at'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')} ‚Äî @{ref['username']} "
        f"({'‚úÖ' if ref['activated'] else '‚ùå'})"
        for ref in referrals
    ) if referrals else "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≤–µ–ª"
    
    await message.answer(
        f"üíé –¢–≤–æ—è —Å–∫–∏–¥–∫–∞: {discount}% (–ø—Ä–∏–≤–µ–¥–µ–Ω–æ {ref_count} –¥—Ä—É–∑–µ–π)\n\n"
        f"üìä –¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{refs_text}\n\n"
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞: `https://t.me/{(await bot.get_me()).username}?start=ref={user_id}`",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        items = data.get('items', [])
        user_id = message.from_user.id

        if not items:
            await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í–∏–¥–∏–º–æ, —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏, —Å–ª–∞–±–∞–∫!")
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω
        await db.activate_referral(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É
        ref_count = await db.get_active_referrals_count(user_id)
        discount = calculate_discount(ref_count)
        
        items_text = "\n".join(
            f"‚ñ´Ô∏è {item['name']} | –í–∫—É—Å: *{item.get('flavor', '–Ω–µ —É–∫–∞–∑–∞–Ω')}* | –ö–æ–ª-–≤–æ: {item['qty']} | –°—É–º–º–∞: {item['price'] * item['qty']}‚ÇΩ"
            for item in items
        )

        total = data.get('total', 0)
        final_total = total * (1 - discount / 100)
        address = data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
        district = data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')
        username = message.from_user.username or message.from_user.first_name

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await message.answer(
            f"‚úÖ *–¢–≤–æ–π –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\n\n"
            f"{items_text}\n\n"
            f"üìç –†–∞–π–æ–Ω: {district}\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n"
            f"üíé –¢–≤–æ—è —Å–∫–∏–¥–∫–∞: *{discount}%* (–ø—Ä–∏–≤–µ–ª {ref_count} –¥—Ä—É–∑–µ–π)\n"
            f"üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: *{final_total:.2f}‚ÇΩ* (–±–µ–∑ —Å–∫–∏–¥–∫–∏ {total}‚ÇΩ)\n\n"
            f"–ì–µ—Ä–º–µ—Å —É–∂–µ –ª–µ—Ç–∏—Ç –∫ —Ç–µ–±–µ —Å –ø–æ—Å—ã–ª–∫–æ–π!",
            reply_markup=get_main_keyboard()
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=(
                f"‚ö°Ô∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó!* ‚ö°Ô∏è\n\n"
                f"{items_text}\n\n"
                f"üìç –†–∞–π–æ–Ω: {district}\n"
                f"üè† –ê–¥—Ä–µ—Å: {address}\n"
                f"üí∞ –°—É–º–º–∞: *{final_total:.2f}‚ÇΩ* (—Å–∫–∏–¥–∫–∞ {discount}%)\n"
                f"üë§ –û—Ç: @{username} (–ø—Ä–∏–≤–µ–ª {ref_count} –¥—Ä—É–∑–µ–π)\n\n"
                f"–ë—ã—Å—Ç—Ä–µ–µ –≤–µ—Ç—Ä–∞, –∫—É—Ä—å–µ—Ä!"
            )
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebAppData")
        await message.answer(
            "‚ö†Ô∏è –ë–æ–≥–∏ –û–ª–∏–º–ø–∞ —Ä–∞–∑–≥–Ω–µ–≤–∞–Ω—ã! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ @olimpmagadan",
            reply_markup=get_main_keyboard()
        )

# –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ —Ç–≤–æ–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer(
        "üìû *–ö–û–ù–¢–ê–ö–¢–´ OlimpShop49* üìû\n\n"
        "üîπ –¢–µ–ª–µ–≥—Ä–∞–º: @olimpmagadan\n"
        "üîπ –ú–µ–Ω–µ–¥–∂–µ—Ä: @olimpshopmanager\n"
        "üîπ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –∫–∏–Ω—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –º–æ–µ —Å—Ç–∞—Ä–∞–Ω–∏–µ(–¢-–ë–∞–Ω–∫:2200701015005249)\n\n"
        "‚ö°Ô∏è *–ó–µ–≤—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!* ‚ö°Ô∏è\n"
        "–ü–∏—à–∏ - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –æ—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–µ–µ –º–æ–ª–Ω–∏–∏!",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
async def working_hours(message: types.Message):
    await message.answer(
        "‚è∞ *–†–ï–ñ–ò–ú –†–ê–ë–û–¢–´* ‚è∞\n\n"
        "‚ñ´Ô∏è –û–±—ã—á–Ω—ã–µ –¥–Ω–∏: 10:00 - 23:00 (–∫–æ–≥–¥–∞ –ó–µ–≤—Å –Ω–µ –ø—å—ë—Ç –∞–º–±—Ä–æ–∑–∏—é)\n"
        "‚ñ´Ô∏è –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏: 12:00 - 22:00 (–Ω–æ—á–Ω—ã–µ –º–æ–ª–Ω–∏–∏ - –Ω–∞—à–µ –≤—Å—ë)\n\n"
        "‚ö°Ô∏è *–î–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö!* ‚ö°Ô∏è\n"
        "–î–∞–∂–µ –µ—Å–ª–∏ —Å–∞–º –ì–µ—Ä–∞–∫–ª —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!",
        reply_markup=get_main_keyboard()
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())